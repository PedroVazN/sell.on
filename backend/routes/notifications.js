const express = require('express');
const router = express.Router();
const Notification = require('../models/Notification');
const { auth } = require('../middleware/auth');

// Aplicar middleware de autentica√ß√£o em todas as rotas
router.use(auth);

// GET /api/notifications - Listar notifica√ß√µes do usu√°rio
router.get('/', async (req, res) => {
  try {
    const { page = 1, limit = 20, unreadOnly = false, type } = req.query;
    const skip = (page - 1) * limit;

    const filter = {
      recipient: req.user.id,
      isActive: true
    };

    if (unreadOnly === 'true') {
      filter.isRead = false;
    }

    if (type) {
      filter.type = type;
    }

    console.log(`=== LISTAR NOTIFICA√á√ïES ===`);
    console.log(`Usu√°rio: ${req.user.id}`);
    console.log(`Tipo do usu√°rio: ${typeof req.user.id}`);
    console.log(`req.user completo:`, req.user);
    console.log(`Filtro ANTES:`, filter);

    // Verificar se h√° notifica√ß√µes com esse recipient
    const allNotificationsForUser = await Notification.find({ recipient: req.user.id });
    console.log(`üîç Todas as notifica√ß√µes para usu√°rio ${req.user.id}:`, allNotificationsForUser.length);
    allNotificationsForUser.forEach((notif, index) => {
      console.log(`  ${index + 1}. ID: ${notif._id}, Recipient: ${notif.recipient}, Recipient Type: ${typeof notif.recipient}, Title: ${notif.title}`);
    });

    console.log(`Filtro FINAL:`, filter);

    const notifications = await Notification.find(filter)
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip(skip)
      .lean();

    const total = await Notification.countDocuments(filter);

    console.log(`Notifica√ß√µes encontradas: ${notifications.length}`);
    notifications.forEach((notification, index) => {
      console.log(`  ${index + 1}. ID: ${notification._id}, Recipient: ${notification.recipient}, Lida: ${notification.isRead}`);
    });

    res.json({
      success: true,
      data: notifications,
      pagination: {
        current: parseInt(page),
        pages: Math.ceil(total / limit),
        total
      }
    });
  } catch (error) {
    console.error('Erro ao buscar notifica√ß√µes:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// GET /api/notifications/unread-count - Contar notifica√ß√µes n√£o lidas
router.get('/unread-count', async (req, res) => {
  try {
    console.log('=== CONTAR NOTIFICA√á√ïES N√ÉO LIDAS ===');
    console.log('Usu√°rio:', req.user ? req.user.id : 'NENHUM');
    console.log('Tipo do usu√°rio ID:', typeof req.user?.id);
    
    const count = await Notification.countDocuments({
      recipient: req.user.id,
      isRead: false,
      isActive: true
    });

    console.log('Contagem encontrada:', count);

    res.json({
      success: true,
      data: { count }
    });
  } catch (error) {
    console.error('Erro ao contar notifica√ß√µes n√£o lidas:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// PATCH /api/notifications/:id/read - Marcar notifica√ß√£o como lida
router.patch('/:id/read', async (req, res) => {
  try {
    console.log(`=== MARCAR COMO LIDA ===`);
    console.log(`Notifica√ß√£o ID: ${req.params.id}`);
    console.log(`Usu√°rio logado: ${req.user.id}`);
    console.log(`Tipo do req.user.id: ${typeof req.user.id}`);
    console.log(`req.user completo:`, req.user);
    
    // Buscar TODAS as notifica√ß√µes com esse ID para debug
    const allNotificationsWithId = await Notification.find({ _id: req.params.id });
    console.log(`üîç Todas as notifica√ß√µes com ID ${req.params.id}:`, allNotificationsWithId.length);
    allNotificationsWithId.forEach((notif, index) => {
      console.log(`  ${index + 1}. ID: ${notif._id}, Recipient: ${notif.recipient}, Recipient Type: ${typeof notif.recipient}`);
    });
    
    const notification = await Notification.findOne({
      _id: req.params.id,
      recipient: req.user.id
    });

    if (!notification) {
      console.log('‚ùå Notifica√ß√£o n√£o encontrada para este usu√°rio');
      return res.status(404).json({
        success: false,
        message: 'Notifica√ß√£o n√£o encontrada'
      });
    }

    console.log(`‚úÖ Notifica√ß√£o encontrada: ${notification._id}`);
    console.log(`Recipient: ${notification.recipient}`);
    console.log(`T√≠tulo: ${notification.title}`);
    console.log(`Atualmente lida: ${notification.isRead}`);

    await notification.markAsRead();
    
    console.log(`‚úÖ Notifica√ß√£o ${notification._id} marcada como lida`);

    res.json({
      success: true,
      data: notification,
      message: 'Notifica√ß√£o marcada como lida'
    });
  } catch (error) {
    console.error('Erro ao marcar notifica√ß√£o como lida:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// PATCH /api/notifications/read-all - Marcar todas as notifica√ß√µes como lidas
router.patch('/read-all', async (req, res) => {
  try {
    await Notification.updateMany(
      {
        recipient: req.user.id,
        isRead: false,
        isActive: true
      },
      {
        isRead: true,
        readAt: new Date()
      }
    );

    res.json({
      success: true,
      message: 'Todas as notifica√ß√µes foram marcadas como lidas'
    });
  } catch (error) {
    console.error('Erro ao marcar todas as notifica√ß√µes como lidas:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// DELETE /api/notifications/clear-all - Limpar todas as notifica√ß√µes
router.delete('/clear-all', async (req, res) => {
  try {
    await Notification.updateMany(
      {
        recipient: req.user.id,
        isActive: true
      },
      {
        isActive: false
      }
    );

    res.json({
      success: true,
      message: 'Todas as notifica√ß√µes foram removidas'
    });
  } catch (error) {
    console.error('Erro ao limpar notifica√ß√µes:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// DELETE /api/notifications/:id - Deletar notifica√ß√£o
router.delete('/:id', async (req, res) => {
  try {
    const notification = await Notification.findOne({
      _id: req.params.id,
      recipient: req.user.id
    });

    if (!notification) {
      return res.status(404).json({
        success: false,
        message: 'Notifica√ß√£o n√£o encontrada'
      });
    }

    notification.isActive = false;
    await notification.save();

    res.json({
      success: true,
      message: 'Notifica√ß√£o removida'
    });
  } catch (error) {
    console.error('Erro ao deletar notifica√ß√£o:', error);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    });
  }
});

// POST /api/notifications - Criar notifica√ß√£o (para testes)
router.post('/', async (req, res) => {
  try {
    const notificationData = {
      ...req.body,
      recipient: req.user.id
    };

    const notification = new Notification(notificationData);
    await notification.save();

    res.status(201).json({
      success: true,
      data: notification,
      message: 'Notifica√ß√£o criada com sucesso'
    });
  } catch (error) {
    console.error('Erro ao criar notifica√ß√£o:', error);
    res.status(400).json({
      success: false,
      message: error.message || 'Erro ao criar notifica√ß√£o'
    });
  }
});

module.exports = router;
