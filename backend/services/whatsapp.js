/**
 * Servi√ßo de notifica√ß√µes via WhatsApp
 * Suporta m√∫ltiplas APIs: Evolution API, Twilio, etc.
 */

const axios = require('axios');

/**
 * Enviar mensagem via WhatsApp
 * @param {string} phoneNumber - N√∫mero do telefone (formato: 5564999999999 ou 64999999999)
 * @param {string} message - Mensagem a ser enviada
 * @param {object} options - Op√ß√µes adicionais
 * @returns {Promise<object>} Resultado do envio
 */
async function sendWhatsAppMessage(phoneNumber, message, options = {}) {
  try {
    // Formatar n√∫mero (remover caracteres especiais, garantir formato correto)
    const formattedPhone = formatPhoneNumber(phoneNumber);
    
    if (!formattedPhone) {
      throw new Error('N√∫mero de telefone inv√°lido');
    }

    // Verificar qual API est√° configurada (Twilio √© padr√£o para produ√ß√£o/Vercel)
    const whatsappProvider = process.env.WHATSAPP_PROVIDER || 'twilio';
    
    switch (whatsappProvider.toLowerCase()) {
      case 'evolution':
        return await sendViaEvolutionAPI(formattedPhone, message, options);
      case 'twilio':
        return await sendViaTwilio(formattedPhone, message, options);
      case 'wppconnect':
        return await sendViaWppConnect(formattedPhone, message, options);
      default:
        throw new Error(`Provedor WhatsApp n√£o suportado: ${whatsappProvider}`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao enviar mensagem WhatsApp:', error);
    throw error;
  }
}

/**
 * Formatar n√∫mero de telefone para padr√£o internacional
 * @param {string} phone - N√∫mero original
 * @returns {string|null} N√∫mero formatado ou null se inv√°lido
 */
function formatPhoneNumber(phone) {
  if (!phone) return null;
  
  // Remover caracteres especiais
  let cleanPhone = phone.replace(/\D/g, '');
  
  // Se come√ßar com 0, remover
  if (cleanPhone.startsWith('0')) {
    cleanPhone = cleanPhone.substring(1);
  }
  
  // Se n√£o come√ßar com c√≥digo do pa√≠s (55 para Brasil), adicionar
  if (!cleanPhone.startsWith('55')) {
    // Assumir que √© n√∫mero brasileiro se tiver 9 d√≠gitos ap√≥s DDD
    if (cleanPhone.length === 11) {
      cleanPhone = '55' + cleanPhone;
    } else if (cleanPhone.length === 10) {
      cleanPhone = '55' + cleanPhone;
    } else {
      // Tentar identificar como n√∫mero internacional
      return cleanPhone;
    }
  }
  
  return cleanPhone;
}

/**
 * Enviar via Evolution API (Open Source - Recomendado)
 * @param {string} phoneNumber - N√∫mero formatado
 * @param {string} message - Mensagem
 * @param {object} options - Op√ß√µes
 */
async function sendViaEvolutionAPI(phoneNumber, message, options = {}) {
  const evolutionApiUrl = process.env.EVOLUTION_API_URL || 'http://localhost:8080';
  const evolutionApiKey = process.env.EVOLUTION_API_KEY || '';
  const instanceName = process.env.EVOLUTION_INSTANCE_NAME || 'default';
  
  if (!evolutionApiKey) {
    console.warn('‚ö†Ô∏è Evolution API Key n√£o configurada. Pule envio WhatsApp.');
    return { success: false, error: 'API n√£o configurada' };
  }
  
  try {
    const url = `${evolutionApiUrl}/message/sendText/${instanceName}`;
    
    const response = await axios.post(url, {
      number: phoneNumber,
      text: message
    }, {
      headers: {
        'Content-Type': 'application/json',
        'apikey': evolutionApiKey
      }
    });
    
    const data = response.data;
    
    if (response.status === 200 || response.status === 201) {
      console.log(`‚úÖ WhatsApp enviado via Evolution API para ${phoneNumber}`);
      return { success: true, data };
    } else {
      throw new Error(data.message || 'Erro ao enviar via Evolution API');
    }
  } catch (error) {
    console.error('‚ùå Erro Evolution API:', error);
    throw error;
  }
}

/**
 * Validar e normalizar n√∫mero From do Twilio
 * Garante que sempre seja o sandbox padr√£o no modo sandbox
 */
async function normalizeTwilioFrom(fromNumber, accountSid, authToken) {
  // N√∫mero sandbox padr√£o do Twilio (mais comum, mas pode variar)
  const DEFAULT_SANDBOX = 'whatsapp:+14155238886';
  
  // Se n√£o configurado, usar padr√£o e avisar
  if (!fromNumber || fromNumber.trim() === '') {
    console.warn('‚ö†Ô∏è TWILIO_WHATSAPP_FROM n√£o configurado');
    console.warn(`   Usando sandbox padr√£o: ${DEFAULT_SANDBOX}`);
    console.warn('   ‚ö†Ô∏è Se n√£o funcionar, descubra o n√∫mero EXATO da sua conta:');
    console.warn('   1. Acesse: https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn');
    console.warn('   2. Procure por "From" ou "Sandbox Number"');
    console.warn('   3. Configure: TWILIO_WHATSAPP_FROM=whatsapp:+1415XXXXXXXX');
    return DEFAULT_SANDBOX;
  }
  
  // Limpar espa√ßos
  let cleaned = fromNumber.trim();
  
  // Remover espa√ßos entre caracteres
  cleaned = cleaned.replace(/\s/g, '');
  
  // Garantir formato whatsapp:+
  if (!cleaned.startsWith('whatsapp:')) {
    cleaned = `whatsapp:${cleaned}`;
  }
  
  // Garantir que tem o +
  if (!cleaned.includes('+')) {
    // Adicionar + ap√≥s whatsapp:
    cleaned = cleaned.replace('whatsapp:', 'whatsapp:+');
  }
  
  // Extrair apenas n√∫meros para valida√ß√£o
  const numberOnly = cleaned.replace(/whatsapp:|\+/g, '');
  
  // Verificar se √© um n√∫mero sandbox (come√ßa com 1415 - formato sandbox Twilio)
  const isSandbox = numberOnly.startsWith('1415') && numberOnly.length === 11;
  
  // Validar formato
  if (!isSandbox) {
    console.error(`‚ùå ERRO: TWILIO_WHATSAPP_FROM (${fromNumber}) n√£o √© v√°lido!`);
    console.error('   üìã N√∫meros sandbox do Twilio:');
    console.error('      - Devem come√ßar com +1415');
    console.error('      - Devem ter 11 d√≠gitos (ex: +14155238886)');
    console.error('      - Formato: whatsapp:+1415XXXXXXXX');
    console.error('');
    console.error('   üîç Para descobrir o n√∫mero EXATO da sua conta:');
    console.error('   1. Acesse: https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn');
    console.error('   2. Procure por "From" ou "Sandbox Number" na p√°gina');
    console.error('   3. Copie o n√∫mero EXATO (formato: +1 415 XXX XXXX)');
    console.error('   4. Remova espa√ßos e configure como: whatsapp:+1415XXXXXXXX');
    console.error('');
    console.error(`   ‚ö†Ô∏è Usando sandbox padr√£o (${DEFAULT_SANDBOX}) - pode n√£o funcionar se sua conta usar outro n√∫mero`);
    return DEFAULT_SANDBOX;
  }
  
  return cleaned;
}

/**
 * Enviar via Twilio (Pago - Profissional)
 * @param {string} phoneNumber - N√∫mero formatado
 * @param {string} message - Mensagem
 * @param {object} options - Op√ß√µes
 */
async function sendViaTwilio(phoneNumber, message, options = {}) {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  const fromNumberEnv = process.env.TWILIO_WHATSAPP_FROM;
  
  if (!accountSid || !authToken) {
    console.warn('‚ö†Ô∏è Twilio n√£o configurado (Account SID ou Auth Token faltando).');
    return { success: false, error: 'Twilio n√£o configurado' };
  }
  
  // Normalizar n√∫mero From (garantir que seja sandbox)
  const from = await normalizeTwilioFrom(fromNumberEnv, accountSid, authToken);
  
  console.log(`üìã Configura√ß√£o Twilio:`);
  console.log(`   Account SID: ${accountSid.substring(0, 10)}...`);
  console.log(`   From (configurado): ${fromNumberEnv || '(n√£o configurado)'}`);
  console.log(`   From (usando): ${from}`);
  
  try {
    // Twilio requer whatsapp: no n√∫mero
    const toNumber = `whatsapp:+${phoneNumber}`;
    
    // VALIDA√á√ÉO CR√çTICA: From e To n√£o podem ser iguais
    // Extrair apenas os n√∫meros para compara√ß√£o
    const fromNumberOnly = from.replace(/whatsapp:|\+|\s/g, '');
    const toNumberOnly = toNumber.replace(/whatsapp:|\+|\s/g, '');
    
    if (fromNumberOnly === toNumberOnly) {
      throw new Error(`N√£o √© poss√≠vel enviar mensagem para o mesmo n√∫mero (From: ${from}, To: ${toNumber}). Verifique ADMIN_WHATSAPP_PHONE e TWILIO_WHATSAPP_FROM.`);
    }
    
    const url = `https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`;
    
    const params = new URLSearchParams();
    params.append('From', from);
    params.append('To', toNumber);
    params.append('Body', message);
    
    console.log(`üì§ Enviando WhatsApp via Twilio:`);
    console.log(`   De (From): ${from}`);
    console.log(`   Para (To): ${toNumber}`);
    console.log(`   Mensagem: ${message.substring(0, 50)}...`);
    
    const response = await axios.post(url, params, {
      headers: {
        'Authorization': 'Basic ' + Buffer.from(`${accountSid}:${authToken}`).toString('base64'),
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    });
    
    const data = response.data;
    
    if (response.status === 200 || response.status === 201) {
      console.log(`‚úÖ WhatsApp enviado via Twilio para ${phoneNumber}`);
      console.log(`   Status: ${data.status}, SID: ${data.sid}`);
      return { success: true, data };
    } else {
      throw new Error(data.message || 'Erro ao enviar via Twilio');
    }
  } catch (error) {
    console.error('‚ùå Erro Twilio:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('   C√≥digo:', error.response.data.code);
      console.error('   Mensagem:', error.response.data.message);
      console.error('   From usado:', from);
      console.error('   Detalhes:', JSON.stringify(error.response.data, null, 2));
      
      // Sugest√µes baseadas no erro
      if (error.response.data.code === 21211 || error.response.data.message?.includes('Channel')) {
        console.error('   üí° SOLU√á√ÉO:');
        console.error('      1. Verifique se ativou o WhatsApp Sandbox no Twilio');
        console.error('      2. Acesse: https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn');
        console.error('      3. Use EXATAMENTE: TWILIO_WHATSAPP_FROM=whatsapp:+14155238886');
        console.error('      4. Certifique-se que o n√∫mero sandbox est√° ativo na sua conta');
      }
      if (error.response.data.code === 21608 || error.response.data.message?.includes('same')) {
        console.error('   üí° SOLU√á√ÉO: From e To n√£o podem ser iguais. Verifique ADMIN_WHATSAPP_PHONE.');
      }
    }
    throw error;
  }
}

/**
 * Enviar via WppConnect (N√£o-oficial)
 * @param {string} phoneNumber - N√∫mero formatado
 * @param {string} message - Mensagem
 * @param {object} options - Op√ß√µes
 */
async function sendViaWppConnect(phoneNumber, message, options = {}) {
  const wppConnectUrl = process.env.WPPCONNECT_URL || 'http://localhost:21465';
  const sessionName = process.env.WPPCONNECT_SESSION || 'default';
  
  try {
    const url = `${wppConnectUrl}/api/${sessionName}/send-message`;
    
    const response = await axios.post(url, {
      phone: phoneNumber,
      message: message
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = response.data;
    
    if (response.status === 200 || response.status === 201) {
      console.log(`‚úÖ WhatsApp enviado via WppConnect para ${phoneNumber}`);
      return { success: true, data };
    } else {
      throw new Error(data.message || 'Erro ao enviar via WppConnect');
    }
  } catch (error) {
    console.error('‚ùå Erro WppConnect:', error);
    throw error;
  }
}

/**
 * Enviar notifica√ß√£o de proposta criada
 * @param {object} proposal - Dados da proposta
 * @param {object} seller - Dados do vendedor
 */
async function notifyProposalCreated(proposal, seller) {
  try {
    const promises = [];
    
    // Enviar para o vendedor (se tiver telefone)
    const sellerPhone = seller.phone || seller.contato?.telefone;
    if (sellerPhone) {
      const sellerMessage = `üéâ *Nova Proposta Criada!*

üìã Proposta: ${proposal.proposalNumber || 'N/A'}
üë§ Cliente: ${proposal.client?.name || 'N/A'}
üí∞ Valor: R$ ${(proposal.total || 0).toLocaleString('pt-BR')}
üìÖ V√°lido at√©: ${new Date(proposal.validUntil).toLocaleDateString('pt-BR')}

Status: ${getStatusEmoji(proposal.status)} ${proposal.status === 'negociacao' ? 'Em Negocia√ß√£o' : proposal.status}

Acompanhe sua proposta no sistema!`;
      
      promises.push(sendWhatsAppMessage(sellerPhone, sellerMessage));
    }
    
    // Enviar para o admin/gerente (se configurado)
    const adminPhone = process.env.ADMIN_WHATSAPP_PHONE;
    if (adminPhone) {
      // Validar se o n√∫mero do admin n√£o √© o mesmo que o From do Twilio
      const formattedAdminPhone = formatPhoneNumber(adminPhone);
      const twilioFrom = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';
      const fromNumberOnly = twilioFrom.replace(/whatsapp:|\+|\s/g, '');
      
      if (formattedAdminPhone === fromNumberOnly) {
        console.warn(`‚ö†Ô∏è ADMIN_WHATSAPP_PHONE (${adminPhone}) √© o mesmo que TWILIO_WHATSAPP_FROM. Pulando envio para evitar erro.`);
      } else {
        const now = new Date();
        const hora = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
        const data = now.toLocaleDateString('pt-BR');
        
        const adminMessage = `üì¢ *Nova Proposta Criada*

üë§ Vendedor: ${seller.name || 'N/A'}
üìã Proposta: ${proposal.proposalNumber || 'N/A'}
üë• Cliente: ${proposal.client?.name || 'N/A'}
üí∞ Valor: R$ ${(proposal.total || 0).toLocaleString('pt-BR')}
üìÖ V√°lido at√©: ${new Date(proposal.validUntil).toLocaleDateString('pt-BR')}
üïê Criada em: ${data} √†s ${hora}

Status: ${getStatusEmoji(proposal.status)} ${proposal.status === 'negociacao' ? 'Em Negocia√ß√£o' : proposal.status}`;
        
        console.log(`üì± Enviando WhatsApp para admin: ${adminPhone} (formatado: ${formattedAdminPhone})`);
        promises.push(sendWhatsAppMessage(adminPhone, adminMessage).catch(err => {
          console.error(`‚ùå Erro ao enviar para admin ${adminPhone}:`, err.message);
          throw err;
        }));
      }
    } else {
      console.warn('‚ö†Ô∏è ADMIN_WHATSAPP_PHONE n√£o configurado - admin n√£o receber√° notifica√ß√£o');
    }
    
    // Enviar todas as mensagens em paralelo
    const results = await Promise.allSettled(promises);
    
    return {
      success: true,
      results: results.map((r, i) => ({
        recipient: i === 0 ? 'vendedor' : 'admin',
        success: r.status === 'fulfilled'
      }))
    };
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de proposta criada:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Enviar notifica√ß√£o de proposta fechada (venda fechada)
 * @param {object} proposal - Dados da proposta
 * @param {object} seller - Dados do vendedor
 */
async function notifyProposalClosed(proposal, seller) {
  try {
    const promises = [];
    
    // Enviar para o vendedor (se tiver telefone)
    const sellerPhone = seller.phone || seller.contato?.telefone;
    if (sellerPhone) {
      const sellerMessage = `üéä *Venda Fechada!*

üìã Proposta: ${proposal.proposalNumber || 'N/A'}
üë§ Cliente: ${proposal.client?.name || 'N/A'}
üí∞ Valor: R$ ${(proposal.total || 0).toLocaleString('pt-BR')}

Parab√©ns pela venda! üéâ`;
      
      promises.push(sendWhatsAppMessage(sellerPhone, sellerMessage));
    }
    
    // Enviar para o admin/gerente (se configurado)
    const adminPhone = process.env.ADMIN_WHATSAPP_PHONE;
    if (adminPhone) {
      // Validar se o n√∫mero do admin n√£o √© o mesmo que o From do Twilio
      const formattedAdminPhone = formatPhoneNumber(adminPhone);
      const twilioFrom = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';
      const fromNumberOnly = twilioFrom.replace(/whatsapp:|\+|\s/g, '');
      
      if (formattedAdminPhone === fromNumberOnly) {
        console.warn(`‚ö†Ô∏è ADMIN_WHATSAPP_PHONE (${adminPhone}) √© o mesmo que TWILIO_WHATSAPP_FROM. Pulando envio para evitar erro.`);
      } else {
        const now = new Date();
        const hora = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
        const data = now.toLocaleDateString('pt-BR');
        
        const adminMessage = `‚úÖ *Venda Fechada!*

üë§ Vendedor: ${seller.name || 'N/A'}
üìã Proposta: ${proposal.proposalNumber || 'N/A'}
üë• Cliente: ${proposal.client?.name || 'N/A'}
üí∞ Valor: R$ ${(proposal.total || 0).toLocaleString('pt-BR')}
üïê Fechada em: ${data} √†s ${hora}

Parab√©ns ao vendedor! üéâ`;
        
        console.log(`üì± Enviando WhatsApp para admin: ${adminPhone} (formatado: ${formattedAdminPhone})`);
        promises.push(sendWhatsAppMessage(adminPhone, adminMessage).catch(err => {
          console.error(`‚ùå Erro ao enviar para admin ${adminPhone}:`, err.message);
          throw err;
        }));
      }
    } else {
      console.warn('‚ö†Ô∏è ADMIN_WHATSAPP_PHONE n√£o configurado - admin n√£o receber√° notifica√ß√£o');
    }
    
    // Enviar todas as mensagens em paralelo
    const results = await Promise.allSettled(promises);
    
    return {
      success: true,
      results: results.map((r, i) => ({
        recipient: i === 0 ? 'vendedor' : 'admin',
        success: r.status === 'fulfilled'
      }))
    };
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de venda fechada:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Enviar notifica√ß√£o de proposta perdida
 * @param {object} proposal - Dados da proposta
 * @param {object} seller - Dados do vendedor
 */
async function notifyProposalLost(proposal, seller) {
  try {
    const promises = [];
    
    // Enviar para o vendedor (se tiver telefone)
    const sellerPhone = seller.phone || seller.contato?.telefone;
    if (sellerPhone) {
      const lossReason = proposal.lossReason ? getLossReasonLabel(proposal.lossReason) : 'N√£o informado';
      
      const sellerMessage = `üòî *Venda Perdida*

üìã Proposta: ${proposal.proposalNumber || 'N/A'}
üë§ Cliente: ${proposal.client?.name || 'N/A'}
üí∞ Valor: R$ ${(proposal.total || 0).toLocaleString('pt-BR')}
üìù Motivo: ${lossReason}

N√£o desanime! Continue trabalhando! üí™`;
      
      promises.push(sendWhatsAppMessage(sellerPhone, sellerMessage));
    }
    
    // Enviar para o admin/gerente (se configurado)
    const adminPhone = process.env.ADMIN_WHATSAPP_PHONE;
    if (adminPhone) {
      // Validar se o n√∫mero do admin n√£o √© o mesmo que o From do Twilio
      const formattedAdminPhone = formatPhoneNumber(adminPhone);
      const twilioFrom = process.env.TWILIO_WHATSAPP_FROM || 'whatsapp:+14155238886';
      const fromNumberOnly = twilioFrom.replace(/whatsapp:|\+|\s/g, '');
      
      if (formattedAdminPhone === fromNumberOnly) {
        console.warn(`‚ö†Ô∏è ADMIN_WHATSAPP_PHONE (${adminPhone}) √© o mesmo que TWILIO_WHATSAPP_FROM. Pulando envio para evitar erro.`);
      } else {
        const lossReason = proposal.lossReason ? getLossReasonLabel(proposal.lossReason) : 'N√£o informado';
        const now = new Date();
        const hora = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
        const data = now.toLocaleDateString('pt-BR');
        
        const adminMessage = `‚ùå *Venda Perdida*

üë§ Vendedor: ${seller.name || 'N/A'}
üìã Proposta: ${proposal.proposalNumber || 'N/A'}
üë• Cliente: ${proposal.client?.name || 'N/A'}
üí∞ Valor: R$ ${(proposal.total || 0).toLocaleString('pt-BR')}
üìù Motivo: ${lossReason}
üïê Perdida em: ${data} √†s ${hora}`;
        
        console.log(`üì± Enviando WhatsApp para admin: ${adminPhone} (formatado: ${formattedAdminPhone})`);
        promises.push(sendWhatsAppMessage(adminPhone, adminMessage).catch(err => {
          console.error(`‚ùå Erro ao enviar para admin ${adminPhone}:`, err.message);
          throw err;
        }));
      }
    } else {
      console.warn('‚ö†Ô∏è ADMIN_WHATSAPP_PHONE n√£o configurado - admin n√£o receber√° notifica√ß√£o');
    }
    
    // Enviar todas as mensagens em paralelo
    const results = await Promise.allSettled(promises);
    
    return {
      success: true,
      results: results.map((r, i) => ({
        recipient: i === 0 ? 'vendedor' : 'admin',
        success: r.status === 'fulfilled'
      }))
    };
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de venda perdida:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Obter emoji do status
 */
function getStatusEmoji(status) {
  const emojiMap = {
    'negociacao': 'üîÑ',
    'venda_fechada': '‚úÖ',
    'venda_perdida': '‚ùå',
    'expirada': '‚è∞',
    'aprovada': '‚úÖ'
  };
  return emojiMap[status] || 'üìã';
}

/**
 * Obter label do motivo de perda
 */
function getLossReasonLabel(reason) {
  const labels = {
    'preco_concorrente': 'Pre√ßo Concorrente',
    'condicao_pagamento': 'Condi√ß√£o de Pagamento',
    'sem_retorno': 'Sem Retorno',
    'credito_negado': 'Cr√©dito Negado',
    'concorrencia_marca': 'Concorr√™ncia (Marca)',
    'adiamento_compra': 'Adiamento de Compra',
    'cotacao_preco': 'Cota√ß√£o de Pre√ßo',
    'perca_preco': 'Perda de Pre√ßo',
    'urgencia_comprou_local': 'Urg√™ncia / Comprou Local',
    'golpe': 'Golpe',
    'licitacao': 'Licita√ß√£o',
    'fechado_outro_parceiro': 'Fechado em Outro Parceiro'
  };
  return labels[reason] || reason;
}

module.exports = {
  sendWhatsAppMessage,
  notifyProposalCreated,
  notifyProposalClosed,
  notifyProposalLost,
  formatPhoneNumber
};

